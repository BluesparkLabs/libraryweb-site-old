<?php
/**
 * @file
 * Code for the UCLALIB Location feature.
 */

include_once 'uclalib_location.features.inc';

/**
 * Implements hook_field_formatter_info().
 */
function uclalib_location_field_formatter_info() {
  $return = array();

  $return['social_links'] = array(
    'label' => t('Social Links'),
    'field types' => array('social_links'),
  );

  return $return;
}

/**
 * Implements hook_field_formatter_view().
 */
function uclalib_location_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, &$items, $display) {
  $element = array(
  );

  switch ($display['type']) {
    case 'social_links':
      $image_path = drupal_get_path('module', 'uclalib_location') . '/social_icons';
      foreach ($items as $delta => $item) {
        if (isset($item['field_social_type'][LANGUAGE_NONE][0]['value']) &&
          isset($item['field_social_link'][LANGUAGE_NONE][0]['url'])) {
        $type = drupal_clean_css_identifier($item['field_social_type'][LANGUAGE_NONE][0]['value']);
        $type = strtolower($type);
        $img_url = url($image_path . '/' . $type . '-32-black.png');
        $url = $item['field_social_link'][LANGUAGE_NONE][0]['url'];

        $link = '<a href="' . $url . '">' .
          '<img class="social-link social-link-' . $type . '" src="' . $img_url . '"/>' .
          '</a>';

        $element[$delta] = array(
          '#type' => 'markup',
          '#markup' => $link,
        );
        }
      }
      break;

  }

  return $element;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function uclalib_location_ctools_plugin_directory($owner, $plugin_type) {
  switch ("$owner:$plugin_type") {
    case 'ctools:content_types':
      return "plugins/$owner/$plugin_type";
  }

  return NULL;
}

/**
 * Implements hook_form_ID_alter().
 */
function uclalib_location_form_location_node_form_alter(&$form, $form_state) {
  // By default we want menu link.
  $form['menu']['enabled']['#default_value'] = 1;

  // Locations must have the 'Locations' menu item as parent.
  // We can't save the default parent menu item to features because it is
  // environment dependant. So we calculate it on runtime.
  $mlid = db_select('menu_links', 'ml')
    ->condition('menu_name', 'main-menu')
    ->condition('link_title', 'Locations')
    ->fields('ml', array('mlid'))
    ->execute()
    ->fetchField();

  if ($mlid) {
    $form['menu']['link']['parent']['#default_value'] = 'main-menu:' . $mlid;
  }
}

/**
 * Implements hook_node_insert().
 */
function uclalib_location_node_insert($node) {
  if ($node->type == 'location') {
    // If the parent node doesn't have menu item we cannot create subpages.
    // Because subpages by definition are pages with menu items child of their parent.
    if (isset($node->menu['mlid'])) {
      _uclalib_location_create_at_this_location_page($node);
      _uclalib_location_create_about_page($node);
    }
  }
}

/**
 * Create a 'at this location' page for a given location site node.
 *
 * @param $location_node
 */
function _uclalib_location_create_at_this_location_page($location_node) {
  // Assign the "At this location" default panel for this page.
  $panelizer_panel = 'node:static:static_at_this_location';

  $menu_title = t('At this location');
  $title = $menu_title;

  // Create the subpage.
  _uclalib_location_create_subpage($location_node, $title, $menu_title, $panelizer_panel);
}

/**
 * Create an "about" page for a given location site node.
 *
 * @param $location_node
 */
function _uclalib_location_create_about_page($location_node) {
  // Assign the "At this location" default panel for this page.
  $panelizer_panel = 'node:static:default';

  $menu_title = t('About');
  $title = $menu_title;

  // Create the subpage.
  $about_page = _uclalib_location_create_subpage($location_node, $title, $menu_title, $panelizer_panel);
  $about_page->body = array(
    LANGUAGE_NONE => array(
      0 => array(
        'value' => '<p>About this library.</p>',
        'format' => 'full_html',
      ),
    ),
  );
  node_save($about_page);
}

/**
 * Generalized function that creates a subpage for a location.
 *
 * It creates the menu item and assigns a panelizer default panel.
 *
 * @param $meeting_node
 * @param $title
 * @param null $panelizer_panel
 */
function _uclalib_location_create_subpage($location_node, $title, $menu_title, $panelizer_panel = NULL) {
  // This can only be done with location site nodes.
  if ($location_node->type != 'location') {
    return;
  }

  // Create the base sub-page node object.
  $sp_node = new stdClass();
  $sp_node->type = 'static';
  $sp_node->uid = $location_node->uid;
  $sp_node->name = $location_node->name;
  $sp_node->title = $title;
  $sp_node->language = LANGUAGE_NONE;
  node_object_prepare($sp_node);

  // Create a menu link in the location site menu.
  $link = array(
    'enabled' => TRUE,
    'link_title' => $menu_title,
    'menu_name' => 'main-menu',
    'weight' => 10,
    'plid' => $location_node->menu['mlid'],
    'description' => $menu_title,
  );
  $sp_node->menu = $link;

  // This is the only way to save a node and assign a panel that is not the default
  // for this content type.
  if ($panelizer_panel) {
    $sp_node->panelizer['page_manager'] = ctools_export_crud_load('panelizer_defaults', $panelizer_panel);
  }

  // Save the node.
  node_save($sp_node);

  return $sp_node;
}
